// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  DEACTIVATED
}

enum Gender {
  MALE
  FEMALE
}

enum HealthStatus {
  EXCELLENT
  VERY_GOOD
  GOOD
  FAIR
  POOR
}

model User {
  id              String            @id() @default(uuid())
  name            String
  email           String            @unique
  password        String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  adoptionRequest AdoptionRequest[]
  role            Role              @default(USER)
  status          UserStatus        @default(ACTIVE)

  @@map("users")
}

model Pet {
  id                   String            @id() @default(uuid())
  name                 String
  species              String
  breed                String
  age                  Int
  size                 String
  location             String
  description          String
  temperament          String
  medicalHistory       String
  adoptionRequirements String
  gender               Gender
  healthStatus         HealthStatus      @default(EXCELLENT)
  imageUrl             String[]
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  adoptionRequest      AdoptionRequest[]

  @@map("pets")
}

model AdoptionRequest {
  id                     String @id() @default(uuid())
  userId                 String
  petId                  String
  status                 Status @default(PENDING)
  petOwnershipExperience String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pet  Pet  @relation(fields: [petId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}
